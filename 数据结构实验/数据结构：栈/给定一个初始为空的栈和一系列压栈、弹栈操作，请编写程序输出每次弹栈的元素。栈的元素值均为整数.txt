#include <stdio.h>
#include<stdlib.h>
#define MaxSize 20000   //注意：一定是20000，否则程序正确提交后也错误
typedef int ElemType;
typedef struct
{
    ElemType elem[MaxSize];
    int top;                      //栈指针
} SqStack;


void InitStack(SqStack **s)   //初始化栈s
{
    *s=(SqStack *)malloc(sizeof(SqStack));
    (*s)->top=-1;

}
void ClearStack(SqStack *s)   //释放栈s
{
  free(s);
}
int StackLength(SqStack *s)   //求栈s长度
{
    int len=0;
    while(s->top!=-1)
    {
        len++;
        s->top--;
    }
    s->top+=len;
    return len;
}
int StackEmpty(SqStack *s)    //判断栈s是否为空栈
{
    if(s->top==-1)
        return 1;
    else
        return 0;
}
int Push(SqStack *s,ElemType e)  //进栈元素e
{

    if(s->top==MaxSize-1){
		 printf("栈满\n");
         return 0;
    }  

    s->top++;
    s->elem[s->top]=e;

    return 1;
}
int Pop(SqStack *s,ElemType *e)   //出栈一个元素
{
    if(s->top==-1)
        return 0;
    else
    {      
        *e=s->elem[s->top];
        s->top--;
    }
    
    return 1;
}
int GetTop(SqStack *s,ElemType *e)   //取栈顶元素
{
    if(s->top==-1)
        return 0;
    else
    {
        *e=s->elem[s->top];
    }
    return 1;
}
void DispStack(SqStack *s)         //从栈顶到栈底输出元素
{
    while(s->top!=-1)
    {
        printf("%c\n",s->elem[s->top]);
        s->top--;
    }
}


int main(){
    int n,i;
    int action;
    ElemType ine,oute;
    SqStack *s=NULL;
    InitStack(&s);
    scanf("%d",&n);
    if(n>20000){
        return 0;
    }

    for(i=0;i<n;i++){
        scanf("%d",&action);
        switch(action){
            case 1: scanf("%d",&ine);
                    if(s->top==MaxSize-1){
                        printf("invalid\n");
                        break;
                    }
                    Push(s,ine);
                    break;
            case 0:
                    if(s->top==-1){
                        printf("invalid\n");
                        break;
                    }
                    Pop(s,&oute);
                    printf("%d\n",oute);
                    break;
            default:break;
        }
    }
	return 0;
}