#include<stdio.h>
#include<stdlib.h>
int compare(char a, char b) ;
void middleToAfter(char* m, char* after);
int getValue(char* after);

int main() {
	int result;
	char m[30], after[30];//middle中缀表达式，after后缀表达式

	
	gets(m);
	middleToAfter(m, after);
	result = getValue(after);
	if (result == 0 && after[0] != 0) { 
		printf("ILLEGAL");   //异常退出
	}
	else {
		printf("%d", result);
	}
	return 0;
}

int compare(char a, char b) {		
	if (b == '(') 
		return 1;//左括号直接入栈
	else if ((b == '*' || b == '/') && (a == '+' || a == '-' || a == '('))
		return 1;//*、/优先级高于+、-、(，入栈
	else if ((b == '+' || b == '-') && (a == '('))
		return 1;//+、-优先级高于(，入栈
	else
		return 0;
	return 0;
}

void middleToAfter(char* m, char* after) {
	int i, j = 0, top = 0;
	char stack[20];//存储运算符的栈
	for (i = 0; m[i] != '\0'; i++) {
		if (m[i] >= '0' && m[i] <= '9') {
			after[j++] = m[i];//操作数则直接输出
		}
		else {
			if (i != 0 && m[i - 1] >= '0' && m[i - 1] <= '9') {
				after[j++] = ' ';//操作数后补充空格分割
			}
			if (m[i] == ')') {
				//遇到右括号则一直弹出直到左括号，但左括号不输出
				while (stack[top - 1] != '(') {
					after[j++] = stack[--top];
					after[j++] = ' ';
				}
				top--;
			}
			else if (top == 0 || compare(stack[top - 1], m[i])) {
				//栈为空或当前操作符的优先级高于栈顶操作符，当前操作符入栈
				stack[top++] = m[i];
			}
			else {
				//当前操作符优先级等于或低于栈顶操作符则弹出栈顶
				while (!compare(stack[top - 1], m[i])) {
					after[j++] = stack[--top];
					after[j++] = ' ';
					if (top == 0)
						break;
				}
				stack[top++] = m[i];//当前操作符入栈
			}
		}
	}
	//补充空格分割
	if (after[j - 1] != ' ') {
		after[j++] = ' ';
	}
	//如果操作符栈不为空，弹出所有操作符
	while (top != 0) {
		after[j++] = stack[--top];
		after[j++] = ' ';
	}
	after[j] = '\0';
}

int getValue(char* after) {
	
	int i;
	int stack[30];
	int top = 0, value = 0;
	for (i = 0; after[i] != '\0'; i++) {
		if (after[i] >= '0' && after[i] <= '9') {
			value = value * 10 + after[i] - '0';
		}
		else if (after[i] == ' ') {
			//操作数入栈
			stack[top++] = value;
			value = 0;
		}
		else {
			//根据操作符，对栈顶两个操作数进行计算并得到结果
			switch (after[i]) {
			case '+': value = stack[top - 2] + stack[top - 1]; break;
			case '-': value = stack[top - 2] - stack[top - 1]; break;
			case '*': value = stack[top - 2] * stack[top - 1]; break;
			case '/':if (stack[top - 1] == 0) {
							return 0;//除数为0，异常退出
					}
					value = stack[top - 2] / stack[top - 1]; break;
			default: break;
			}
			top -= 2;
		}
	}

	return stack[0];
}

