#include <stdio.h>
#include<stdlib.h>

typedef int ElemType;
typedef struct
{
	ElemType *elem;
	int top;                      //栈指针
} SqStack;
int maxsize;
int colorNo;

void InitStack(SqStack **s)   //初始化栈s
{
	*s = (SqStack *)malloc(sizeof(SqStack));
	(*s)->elem = (ElemType *)malloc(sizeof(ElemType)*maxsize);
	(*s)->top = -1;

}
void ClearStack(SqStack *s)   //释放栈s
{
	free(s->elem);

	free(s);
}
int StackLength(SqStack *s)   //求栈s长度
{
	int len = 0;
	while (s->top != -1)
	{
		len++;
		s->top--;
	}
	s->top += len;
	return len;
}
int StackEmpty(SqStack *s)    //判断栈s是否为空栈
{
	if (s->top == -1)
		return 1;
	else
		return 0;
}
int Push(SqStack *s, ElemType e)  //进栈元素e
{

	if (s->top == maxsize - 1) {
		
		return 0;
	}

	s->top++;
	s->elem[s->top] = e;

	return 1;
}
int Pop(SqStack *s, ElemType *e)   //出栈一个元素
{
	if (s->top == -1)
		return 0;
	else
	{
		*e = s->elem[s->top];
		s->top--;
	}

	return 1;
}
int GetTop(SqStack *s, ElemType *e)   //取栈顶元素
{
	if (s->top == -1)
		return 0;
	else
	{
		*e = s->elem[s->top];
	}
	return 1;
}
void DispStack(SqStack *s)         //从栈顶到栈底输出元素
{
	while (s->top != -1)
	{
		printf("%c\n", s->elem[s->top]);
		s->top--;
	}
}

void getArray(int *array,int colorNo) {
	int i;
	for (i = 0; i < colorNo; i++) {
		scanf("%d", &array[i]);
	}
	
}

int isRight(SqStack *s, int *a) {
	int i;
	int left;
	ElemType e;

	int color = 1;
	//遍历颜色序列，颜色：colorNo个
	for (i = 0; i < colorNo;i++){
		//该序号颜色是需要的颜色
		if (a[i] == color) {
			++color;
			//若颜色正确，不入栈，颜色+1，同时检查栈顶颜色是否是下一个颜色(循环)
			while (1) {
				if (s->elem[s->top] == color) {
					Pop(s, &e);
					color++;
				}
				else {
					break;
				}
			}
			continue;
		}
		//该序号i颜色不是需要的颜色
		else {
			//此时栈已满，a[i]！= color,a[i]无法放入栈，则直接返回0
			if (Push(s, a[i]) == 0) {
				return 0;
			}
		}
	}

	if (color > colorNo) {
		return 1;
	
	}
	else {
		return 0;
	}

}




int main() {

	int i;

	int k;
	int *array;//存放颜色序列
	SqStack *s;
    
	scanf("%d %d %d", &colorNo,&maxsize,&k);
    
	if (colorNo < 1 || colorNo > 1000) {
		return 0;
	}
	if (maxsize >= colorNo) {
		return 0;
	}
    
    array=(int *)malloc(sizeof(int)*colorNo);
	for (i = 0; i < k; i++) {
		InitStack(&s);
		getArray(array, colorNo);
		if (isRight(s, array)) {
			printf("YES\n");
		}
		else {
			printf("NO\n");
		}
	}

    return 0;
}